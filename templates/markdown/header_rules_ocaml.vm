[Reference Manual](index.md)

# ocaml rules
**WARNING** Beta version - subject to change

----

**Rules**:

* [ocaml_archive](#ocaml_archive)
* [ocaml_executable](#ocaml_executable)
* [ocaml_import](#ocaml_import)
* [ocaml_interface](#ocaml_interface)
* [ocaml_library](#ocaml_library)
* [ocaml_module](#ocaml_module)
* [ocaml_ns](#ocaml_ns)

**<a name="configdefs">OCaml Rules - Configurable defaults</a>**:

These options apply to all `ocaml_*` rules. They can be overridden on
the command line; for example, to enable verbosity (`-verbose`) for
all `ocaml_*` build targets, pass `--@ocaml//verbose`. See
[Configurable_Defaults](../ug/configurable_defaults.md) for more
information.

**Options** May be enums, strings, labels, etc.

| Label | Default |  |
| ----- | ------- | ------- |
| @ocaml//mode | @ocaml//mode:bytecode | Enum: :bytecode, :native |

**Boolean Flags** Each boolean flag `foo` may be enabled by
`--@ocaml//foo` or `--@ocaml//foo:enable`, and disabled with
`--no@ocaml//foo` or `--@ocaml//foo:disable`. Each flag has a
corresponding OCaml option and an OBazl (not an OCaml) negation; see
[Configurable_Defaults:
Disabling](../ug/configurable_defaults.md#disabling) for information
on how to use negated options to override defaults.

In addition to these, which apply to all `ocaml_*` rules, each rule
may have its own set of configurable defaults.

| Label | Default | `opts` attrib |
| ----- | ------- | ------- |
| @ocaml//debug | disabled | `-g`, `-no-g`|
| @ocaml//cmt | disabled | `-bin-annot`, `-no-bin-annot` |
| @ocaml//keep-locs | enabled | `-keep-locs`, `-no-keep-locs` |
| @ocaml//noassert | enabled | `-noassert`, `-no-noassert` |
| @ocaml//opaque | enabled | `-opaque`, `-no-opaque` |
| @ocaml//short-paths | enabled | `-short-paths`, `-no-short-paths` |
| @ocaml//strict-formats | enabled | `-strict-formats`, `-no-strict-formats` |
| @ocaml//strict-sequence | enabled | `-strict-sequence`, `-no-strict-sequence` |
| @ocaml//verbose<sup>1</sup> | disabled | `-verbose`, `-no-verbose` |

<sup>1</sup> Each `ocaml_*` rule also has it's own `verbose` flag.

----
