load("@io_bazel_stardoc//stardoc:stardoc.bzl", "stardoc")
load("@bazel_pandoc//:pandoc.bzl", "pandoc")

RULES_PPX_DEPS = [
    "@obazl_rules_ocaml//ocaml/_rules:ocaml_rules",
    "@obazl_rules_ocaml//ocaml:bootstrap",
    "@obazl_rules_ocaml//ocaml/_bootstrap:bootstrap",
    "@obazl_rules_ocaml//ocaml/_rules:ppx_rules",
    "@obazl_rules_ocaml//ppx/_transitions:transitions",
    "@obazl_rules_opam//opam:bootstrap",
    "@obazl_rules_opam//opam/_debug:debug",
    "@obazl_rules_opam//opam/_functions:functions",
    "@obazl_rules_opam//opam/_bootstrap:bootstrap",
    "@obazl_tools_bazel//tools/functions",
    "@bazel_skylib//lib:collections",
    "@bazel_skylib//lib:types",
]

################################################################
stardoc(
    name = "functions",
    input = ":functions_refman.bzl",
    out = "functions.md",
    func_template = "//templates/markdown:functions.vm",
    header_template = "//templates/markdown:header_functions.vm",
    deps  = RULES_PPX_DEPS + [
    ],
    symbol_names = [
        "ocaml_configure",
        "opam_configure"
    ]
)

################################################################
# genrule(
#     name = "x",
#     srcs = [":ocaml_archive.md"],
#     outs = ["ocaml_archive.dita"],
#     cmd  = "cp $< $@"
# )

# stardoc(
#     name = "ocaml_archive",
#     input = "rules_ocaml.bzl",
#     # out = "ocaml_archive.dita",
#     out = "ocaml_archive.md",
#     rule_template = select({
#         "//:dita_enabled": "//templates/dita:rule.vm",
#         "//conditions:default": "//templates/markdown:rule.vm"
#     }),
#     header_template = select({
#         "//:dita_enabled": "//templates/dita:header_rules.vm",
#         "//conditions:default": "//templates/markdown:header_rules_ocaml.vm"
#     }),
#     deps  = [
#         "@obazl_rules_ocaml//ocaml/_rules:ocaml_rules",
#         "@obazl_rules_ocaml//ocaml:bootstrap",
#         "@obazl_rules_ocaml//ocaml/_bootstrap:bootstrap",
#     ],
#     symbol_names = [
#         "ocaml_archive",
#     ]
# )

################################################################
stardoc(
    name = "rules_ocaml",
    input = "rules_ocaml.bzl",
    out = "rules_ocaml.md",
    header_template = "//templates/markdown:header_rules_ocaml.vm",
    rule_template = "//templates/markdown:rule.vm",
    deps  = [
        "@obazl_rules_ocaml//ocaml/_rules:ocaml_rules",
        "@obazl_rules_ocaml//ocaml:bootstrap",
        "@obazl_rules_ocaml//ocaml/_bootstrap:bootstrap",
    ],
    symbol_names = [
        "ocaml_archive",
        "ocaml_executable",
        "ocaml_import",
        "ocaml_interface",
        "ocaml_library",
        "ocaml_module",
        "ocaml_ns",
    ]
)

stardoc(
    name = "rules_ppx",
    input = ":rules_ppx.bzl",
    out = "rules_ppx.md",
    header_template = "//templates/markdown:header_rules_ppx.vm",
    rule_template = "//templates/markdown:rule.vm",
    deps  = RULES_PPX_DEPS,
    symbol_names = [
        "ppx_archive",
        "ppx_executable",
        # "ppx_library",
        "ppx_module",
        "ppx_ns",
        "ppx_test",
    ]
)

# stardoc(
#     name = "ocaml_archive_doc",
#     input = "@obazl_rules_ocaml//ocaml/_rules:ocaml_archive.bzl",
#     out = "ocaml_archive_doc.md",
#     provider_template = "//templates/markdown:provider.vm",
#     # provider_template = "@io_bazel_stardoc//stardoc:templates/html_tables/provider.vm",
#     rule_template = "//templates/markdown:rule.vm",
#     # rule_template = "@io_bazel_stardoc//stardoc:templates/html_tables/rule.vm",
#     deps  = [
#         "@obazl_rules_ocaml//ocaml/_rules:ocaml_rules",
#     ],
#     symbol_names = [
#         "ocaml_archive",
#     ]
# )

stardoc(
    name = "providers_ocaml",
    input = ":providers_ocaml.bzl",
    out = "providers_ocaml.md",
    header_template   = "//templates/markdown:header_providers_ocaml.vm",
    provider_template = "//templates/markdown:provider.vm",
    # provider_template = "@io_bazel_stardoc//stardoc:templates/html_tables/provider.vm",
    deps  = [
        "@obazl_rules_ocaml//ocaml:providers",
    ],
    symbol_names = [
        "OpamPkgInfo",
        "OcamlDepsetProvider",
        "OcamlArchivePayload",
        "OcamlArchiveProvider",
        "OcamlImportProvider",
        "OcamlInterfaceProvider",
        "OcamlInterfacePayload",
        "OcamlLibraryProvider",
        "OcamlModuleProvider",
        "OcamlModulePayload",
        "OcamlNsModuleProvider",
        "OcamlNsModulePayload"
    ]
)

stardoc(
    name = "providers_opam",
    input = ":providers_opam.bzl",
    out = "providers_opam.md",
    header_template   = "//templates/markdown:header_providers_opam.vm",
    provider_template = "//templates/markdown:provider.vm",
    # provider_template = "@io_bazel_stardoc//stardoc:templates/html_tables/provider.vm",
    deps  = [
        "@bazel_skylib//lib:collections",
        "@bazel_skylib//lib:types",
        "@obazl_rules_opam//opam:bootstrap",
        "@obazl_rules_opam//opam/_bootstrap:bootstrap",
        "@obazl_rules_opam//opam/_debug:debug",
        "@obazl_rules_opam//opam/_functions:functions",
        "@obazl_rules_opam//opam/_providers:providers",
        "@obazl_tools_bazel//tools/functions",
    ],
    symbol_names = [
        "OpamPkgInfo",
        "OpamConfig",
        "OpamSwitch"
    ]
)

stardoc(
    name = "providers_ppx",
    input = ":providers_ppx.bzl",
    out = "providers_ppx.md",
    header_template   = "//templates/markdown:header_providers_ppx.vm",
    provider_template = "//templates/markdown:provider.vm",
    # provider_template = "@io_bazel_stardoc//stardoc:templates/html_tables/provider.vm",
    deps  = [
        "@obazl_rules_ocaml//ocaml:providers",
    ],
    symbol_names = [
        "PpxDepsetProvider",
        "PpxArchiveProvider",
        "PpxExecutableProvider"
    ]
)

################################################################
pandoc(
    name = "index",
    src = "index_refman.md",
    output = "index.md",
    visibility = ["//visibility:public"],
)

pandoc(
    name = "linkmode",
    src = "linkmode.md",
    output = "linkmode_doc.md",
    visibility = ["//visibility:public"],
)

pandoc(
    name = "interop",
    src = "interop.md",
    output = "interop_doc.md",
    visibility = ["//visibility:public"],
)

